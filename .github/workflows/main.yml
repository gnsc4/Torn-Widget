# Name of the GitHub Actions workflow
name: Build Tauri App (Linux)

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches:
      - main # Or your default branch, e.g., master
  # Triggers the workflow on pull request events but only for the main branch
  pull_request:
    branches:
      - main # Or your default branch

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-linux"
  build-linux:
    # The name that will be displayed on GitHub for this job
    name: Build for Linux
    # The type of runner that the job will run on
    runs-on: ubuntu-latest # Use the latest Ubuntu runner provided by GitHub

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify the Node.js version your project uses or a recent LTS

      # Step 3: Install the stable Rust toolchain
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable # Explicitly set to stable, though it's the default

      # Step 4: Install necessary Linux dependencies for Tauri (and webkit2gtk for the webview)
      # These dependencies should also cover what's needed for pacman packaging by Tauri.
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            # Arch-specific packaging tools like 'fakeroot' are usually needed for makepkg,
            # but tauri-bundler might handle its pacman creation differently or have its own deps.
            # The tauri-action should manage underlying tauri-bundler dependencies.
            # If pacman build fails due to missing tools, they might need to be added here (e.g. bsdtar for .tar.zst)
            # For now, we rely on tauri-action and its bundled tauri-cli.
            binutils # Often needed for stripping binaries, which tauri might do

      # Step 5: Install frontend dependencies using npm
      # This assumes your package.json and package-lock.json are in the 'torn-status-widget' directory
      - name: Install frontend dependencies
        working-directory: ./torn-status-widget # Set working directory for npm commands
        run: npm install

      # Step 5.1: Grant execute permissions to the locally installed Tauri CLI
      # This addresses potential "Permission denied" errors when npm tries to run the tauri script.
      - name: Set execute permission for Tauri CLI
        working-directory: ./torn-status-widget # Ensure we are in the correct directory
        run: |
          if [ -f ./node_modules/.bin/tauri ]; then
            chmod +x ./node_modules/.bin/tauri
            echo "Execute permission set for ./node_modules/.bin/tauri"
          else
            echo "Tauri CLI not found at ./node_modules/.bin/tauri. This might be an issue."
            # Optionally, you might want to fail the build here if it's critical
            # exit 1
          fi

      # Step 6: Use the official Tauri action to build the application
      # This action handles building the frontend (if not already done) and then building the Tauri app.
      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0 # Using v0 for the latest release of the action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }} # Uncomment if using Tauri's updater and code signing
          # TAURI_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PRIVATE_KEY_PASSWORD }} # Uncomment if your private key is password-protected
        with:
          # Path to the directory containing your tauri.conf.json and package.json for the widget
          projectPath: './torn-status-widget'
          # Specify the targets to build, including deb, appimage, and pacman for Arch Linux
          targets: 'deb,appimage,pacman'

          # If you want the action to create a GitHub Release with the artifacts:
          # tagName: app-v__VERSION__ # __VERSION__ is auto-replaced with app version from tauri.conf.json
          # releaseName: 'App v__VERSION__'
          # releaseBody: 'See the assets to download this version of the Torn Status Widget.'
          # releaseDraft: false # Set to true to create a draft release
          # releasePrerelease: false # Set to true if this is a pre-release

      # Step 7: Upload the built Linux artifacts (.deb, .AppImage, and .pacman)
      # This step is useful if you are not using the release creation feature of tauri-action directly,
      # or if you want to access the artifacts for other purposes before a release.
      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: torn-status-widget-linux-builds # Name of the artifact bundle
          path: |
            ./torn-status-widget/src-tauri/target/release/bundle/deb/*.deb
            ./torn-status-widget/src-tauri/target/release/bundle/appimage/*.AppImage
            ./torn-status-widget/src-tauri/target/release/bundle/pacman/*.pacman
            ./torn-status-widget/src-tauri/target/release/bundle/pacman/*.pkg.tar.zst # Also include if this format is generated
          if-no-files-found: error # Fails the step if no files are found at the specified paths
