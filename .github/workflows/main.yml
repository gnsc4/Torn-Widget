# Name of the GitHub Actions workflow
name: Build Tauri App (Linux, macOS & Windows)

# Controls when the workflow will run
on:
  push:
    branches:
      - main # For regular builds/tests
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*' # Trigger on semantic version tags like v1.0.0, v1.2.3-alpha
      - 'v[0-9]+.[0-9]+*'       # Trigger on tags like v1.0, v1.2-beta
      - 'v[0-9]+*'             # Trigger on tags like v1, v2-rc
  pull_request:
    branches:
      - main # Or your default branch

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev build-essential curl wget file libssl-dev \
            libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev binutils
      - name: Install frontend dependencies
        working-directory: ./torn-status-widget
        run: npm install
      - name: Set execute permissions for CLIs
        working-directory: ./torn-status-widget
        run: |
          if [ -f ./node_modules/.bin/tauri ]; then chmod +x ./node_modules/.bin/tauri; echo "Tauri CLI permissions set"; fi
          if [ -f ./node_modules/.bin/vite ]; then chmod +x ./node_modules/.bin/vite; echo "Vite CLI permissions set"; fi
      - name: Build Tauri application (Linux)
        uses: tauri-apps/tauri-action@v0
        env:
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Removed as this step only builds
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PRIVATE_KEY_PASSWORD }}
        with:
          projectPath: './torn-status-widget'
          targets: 'deb,appimage,pacman,updater'
      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: torn-status-widget-linux-builds
          path: |
            ./torn-status-widget/src-tauri/target/release/bundle/deb/*.deb
            ./torn-status-widget/src-tauri/target/release/bundle/appimage/*.AppImage
            ./torn-status-widget/src-tauri/target/release/bundle/pacman/*.pacman
            ./torn-status-widget/src-tauri/target/release/bundle/pacman/*.pkg.tar.zst
            ./torn-status-widget/src-tauri/target/release/*.AppImage.tar.gz
            ./torn-status-widget/src-tauri/target/release/*.AppImage.tar.gz.sig
          if-no-files-found: error

  build-macos:
    name: Build for macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Install frontend dependencies
        working-directory: ./torn-status-widget
        run: npm install
      - name: Set execute permissions for CLIs
        working-directory: ./torn-status-widget
        run: |
          if [ -f ./node_modules/.bin/tauri ]; then chmod +x ./node_modules/.bin/tauri; echo "Tauri CLI permissions set"; fi
          if [ -f ./node_modules/.bin/vite ]; then chmod +x ./node_modules/.bin/vite; echo "Vite CLI permissions set"; fi
      - name: Build Tauri application (macOS)
        uses: tauri-apps/tauri-action@v0
        env:
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Removed as this step only builds
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PRIVATE_KEY_PASSWORD }}
          # APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          # APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          # APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        with:
          projectPath: './torn-status-widget'
          targets: 'app,dmg,updater'
      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: torn-status-widget-macos-builds
          path: |
            ./torn-status-widget/src-tauri/target/release/bundle/macos/*.app
            ./torn-status-widget/src-tauri/target/release/bundle/dmg/*.dmg
            ./torn-status-widget/src-tauri/target/release/*.app.tar.gz
            ./torn-status-widget/src-tauri/target/release/*.app.tar.gz.sig
          if-no-files-found: error

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: tauri-apps/setup-webview2@v2
      - name: Install frontend dependencies
        working-directory: ./torn-status-widget
        run: npm install
      - name: Set execute permissions for CLIs (Git Bash)
        working-directory: ./torn-status-widget
        shell: bash
        run: |
          if [ -f ./node_modules/.bin/tauri.cmd ]; then chmod +x ./node_modules/.bin/tauri.cmd; echo "Tauri CMD permissions set"; fi
          if [ -f ./node_modules/.bin/tauri ]; then chmod +x ./node_modules/.bin/tauri; echo "Tauri script permissions set"; fi
          if [ -f ./node_modules/.bin/vite.cmd ]; then chmod +x ./node_modules/.bin/vite.cmd; echo "Vite CMD permissions set"; fi
          if [ -f ./node_modules/.bin/vite ]; then chmod +x ./node_modules/.bin/vite; echo "Vite script permissions set"; fi
      - name: Build Tauri application (Windows)
        uses: tauri-apps/tauri-action@v0
        env:
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Removed as this step only builds
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PRIVATE_KEY_PASSWORD }}
          # TAURI_SIGN_PASSWORD: ${{ secrets.WINDOWS_SIGNING_PFX_PASSWORD }}
        with:
          projectPath: './torn-status-widget'
          targets: 'msi,updater'
          # tauriSign: true
          # tauriPfx: ${{ secrets.WINDOWS_SIGNING_PFX_BASE64 }}
          # tauriPfxPassword: ${{ secrets.WINDOWS_SIGNING_PFX_PASSWORD }}
      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: torn-status-widget-windows-builds
          path: |
            ./torn-status-widget/src-tauri/target/release/bundle/msi/*.msi
            ./torn-status-widget/src-tauri/target/release/*.msi.zip
            ./torn-status-widget/src-tauri/target/release/*.msi.zip.sig
          if-no-files-found: error

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: List downloaded artifacts (for debugging)
        run: ls -R artifacts
      - name: Generate latest.json for updater
        id: generate_json
        run: |
          echo "Generating latest.json..."
          VERSION="${{ github.ref_name }}" 
          VERSION_NO_V="${VERSION#v}" 
          PUB_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          REPO_URL="https://github.com/${{ github.repository }}/releases/download/${VERSION}"
          PLATFORMS_JSON=""

          # macOS (assuming universal .app.tar.gz or prioritizing one if multiple arch-specific exist)
          MACOS_UPDATER_TAR_GZ=$(find artifacts/torn-status-widget-macos-builds -name "*.app.tar.gz" -print -quit)
          if [ -n "$MACOS_UPDATER_TAR_GZ" ]; then
            MACOS_SIG_FILE="${MACOS_UPDATER_TAR_GZ}.sig"
            if [ -f "$MACOS_SIG_FILE" ]; then
              MACOS_SIG_CONTENT=$(cat "$MACOS_SIG_FILE" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g') # Escape quotes and newlines for JSON
              MACOS_URL="${REPO_URL}/$(basename "$MACOS_UPDATER_TAR_GZ")"
              PLATFORMS_JSON="$PLATFORMS_JSON \"darwin-aarch64\": {\"signature\": \"$MACOS_SIG_CONTENT\", \"url\": \"$MACOS_URL\"},"
              PLATFORMS_JSON="$PLATFORMS_JSON \"darwin-x86_64\": {\"signature\": \"$MACOS_SIG_CONTENT\", \"url\": \"$MACOS_URL\"},"
            else
              echo "Warning: Signature file not found for $MACOS_UPDATER_TAR_GZ"
            fi
          else
            echo "Warning: macOS updater .app.tar.gz not found."
          fi
          
          LINUX_APPIMAGE_TAR_GZ=$(find artifacts/torn-status-widget-linux-builds -name "*.AppImage.tar.gz" -print -quit)
          if [ -n "$LINUX_APPIMAGE_TAR_GZ" ]; then
            LINUX_SIG_FILE="${LINUX_APPIMAGE_TAR_GZ}.sig"
            if [ -f "$LINUX_SIG_FILE" ]; then
              LINUX_SIG_CONTENT=$(cat "$LINUX_SIG_FILE" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g') # Escape quotes and newlines
              LINUX_URL="${REPO_URL}/$(basename "$LINUX_APPIMAGE_TAR_GZ")"
              PLATFORMS_JSON="$PLATFORMS_JSON \"linux-x86_64\": {\"signature\": \"$LINUX_SIG_CONTENT\", \"url\": \"$LINUX_URL\"},"
            else
              echo "Warning: Signature file not found for $LINUX_APPIMAGE_TAR_GZ"
            fi
          else
            echo "Warning: Linux AppImage updater .tar.gz not found."
          fi

          WINDOWS_MSI_ZIP=$(find artifacts/torn-status-widget-windows-builds -name "*.msi.zip" -print -quit)
          if [ -n "$WINDOWS_MSI_ZIP" ]; then
            WINDOWS_SIG_FILE="${WINDOWS_MSI_ZIP}.sig"
            if [ -f "$WINDOWS_SIG_FILE" ]; then
              WINDOWS_SIG_CONTENT=$(cat "$WINDOWS_SIG_FILE" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g') # Escape quotes and newlines
              WINDOWS_URL="${REPO_URL}/$(basename "$WINDOWS_MSI_ZIP")"
              PLATFORMS_JSON="$PLATFORMS_JSON \"windows-x86_64\": {\"signature\": \"$WINDOWS_SIG_CONTENT\", \"url\": \"$WINDOWS_URL\"},"
            else
              echo "Warning: Signature file not found for $WINDOWS_MSI_ZIP"
            fi
          else
            echo "Warning: Windows MSI updater .zip not found."
          fi

          PLATFORMS_JSON=$(echo "$PLATFORMS_JSON" | sed 's/,$//') # Remove trailing comma
          NOTES="Release notes for version ${VERSION}"
          # Ensure notes are properly escaped for JSON if they contain special characters
          NOTES_ESCAPED=$(echo "$NOTES" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          
          JSON_CONTENT="{\"version\": \"${VERSION_NO_V}\", \"notes\": \"${NOTES_ESCAPED}\", \"pub_date\": \"${PUB_DATE}\", \"platforms\": {${PLATFORMS_JSON}}}"
          echo "$JSON_CONTENT" > latest.json
          echo "Generated latest.json:"
          cat latest.json
          # Validate JSON (optional but good for debugging)
          if ! jq . latest.json > /dev/null; then
            echo "Error: Generated latest.json is invalid!"
            # cat latest.json # Print again for detailed inspection
            # exit 1 # Optionally fail the job
          fi
          echo "::set-output name=json_path::$(pwd)/latest.json"
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}.
            See assets below for downloads.
          draft: false
          prerelease: ${{ contains(github.ref_name, '-alpha') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-rc') }}
          files: |
            artifacts/torn-status-widget-linux-builds/*.deb
            artifacts/torn-status-widget-linux-builds/*.AppImage
            artifacts/torn-status-widget-linux-builds/*.pacman
            artifacts/torn-status-widget-linux-builds/*.pkg.tar.zst
            artifacts/torn-status-widget-linux-builds/*.AppImage.tar.gz
            artifacts/torn-status-widget-linux-builds/*.AppImage.tar.gz.sig
            artifacts/torn-status-widget-macos-builds/*.dmg
            artifacts/torn-status-widget-macos-builds/*.app.tar.gz
            artifacts/torn-status-widget-macos-builds/*.app.tar.gz.sig
            artifacts/torn-status-widget-windows-builds/*.msi
            artifacts/torn-status-widget-windows-builds/*.msi.zip
            artifacts/torn-status-widget-windows-builds/*.msi.zip.sig
            ${{ steps.generate_json.outputs.json_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
