# Name of the GitHub Actions workflow
name: Build Tauri App (Linux)

# Controls when the workflow will run
on:
  push:
    branches:
      - main # For regular builds/tests
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*' # Trigger on semantic version tags like v1.0.0, v1.2.3-alpha
      - 'v[0-9]+.[0-9]+*'       # Trigger on tags like v1.0, v1.2-beta
      - 'v[0-9]+*'             # Trigger on tags like v1, v2-rc
  pull_request:
    branches:
      - main # Or your default branch

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-linux"
  build-linux:
    # The name that will be displayed on GitHub for this job
    name: Build for Linux
    # The type of runner that the job will run on
    runs-on: ubuntu-latest # Use the latest Ubuntu runner provided by GitHub

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify the Node.js version your project uses or a recent LTS

      # Step 3: Install the stable Rust toolchain
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable # Explicitly set to stable, though it's the default

      # Step 4: Install necessary Linux dependencies for Tauri
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            binutils

      # Step 5: Install frontend dependencies using npm
      - name: Install frontend dependencies
        working-directory: ./torn-status-widget
        run: npm install

      # Step 5.1: Grant execute permissions to the locally installed Tauri CLI
      - name: Set execute permission for Tauri CLI
        working-directory: ./torn-status-widget
        run: |
          if [ -f ./node_modules/.bin/tauri ]; then
            chmod +x ./node_modules/.bin/tauri
            echo "Execute permission set for ./node_modules/.bin/tauri"
          else
            echo "Tauri CLI not found at ./node_modules/.bin/tauri. This might be an issue."
          fi

      # Step 6: Use the official Tauri action to build the application and create a release on tag pushes
      - name: Build Tauri application and Optionally Create Release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }} # Uncomment if using Tauri's updater and code signing
          # TAURI_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PRIVATE_KEY_PASSWORD }} # Uncomment if your private key is password-protected
        with:
          projectPath: './torn-status-widget'
          targets: 'deb,appimage,pacman'

          # --- Release Configuration ---
          # These settings will create a GitHub Release when a tag is pushed.
          # If not a tag push, tagName will be empty, and no release should be created by tauri-action.
          tagName: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || '' }}
          releaseName: ${{ startsWith(github.ref, 'refs/tags/') && format('Release {0}', github.ref_name) || '' }}
          releaseBody: ${{ startsWith(github.ref, 'refs/tags/') && format('Automated release for {0}. See assets below for downloads.', github.ref_name) || '' }}
          releaseDraft: false # Set to true to create a draft release
          releasePrerelease: ${{ startsWith(github.ref, 'refs/tags/') && (contains(github.ref_name, '-alpha') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-rc')) || false }}

      # Step 7: Upload the built Linux artifacts (.deb, .AppImage, and .pacman)
      # This step uploads artifacts for all runs (pushes, PRs, tags) for inspection or other uses.
      # Tauri-action handles adding these to the GitHub Release directly when a tag is pushed.
      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: torn-status-widget-linux-builds # Name of the artifact bundle
          path: |
            ./torn-status-widget/src-tauri/target/release/bundle/deb/*.deb
            ./torn-status-widget/src-tauri/target/release/bundle/appimage/*.AppImage
            ./torn-status-widget/src-tauri/target/release/bundle/pacman/*.pacman
            ./torn-status-widget/src-tauri/target/release/bundle/pacman/*.pkg.tar.zst # Also include if this format is generated
          if-no-files-found: error # Fails the step if no files are found at the specified paths
